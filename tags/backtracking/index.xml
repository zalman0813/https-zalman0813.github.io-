<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backtracking on Pin Code Blog</title><link>https://zalman0813.github.io/tags/backtracking/</link><description>Recent content in backtracking on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Mar 2023 08:20:19 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/backtracking/index.xml" rel="self" type="application/rss+xml"/><item><title>337. House Robber Iii</title><link>https://zalman0813.github.io/posts/house-robber-iii/</link><pubDate>Sun, 05 Mar 2023 08:20:19 +0800</pubDate><guid>https://zalman0813.github.io/posts/house-robber-iii/</guid><description>Link: https://leetcode.com/problems/house-robber-iii/
Status: done
Solution: backtracking
Code:
#Time Complexity: O(n) #Space Complexity: O(h), , where h is the height of the tree # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def dfs(self, root): if root is None: return [0, 0] leftChild = self.dfs(root.left) rightChild = self.dfs(root.right) not_node = max(leftChild) + max(rightChild) node = root.</description></item><item><title>93. Restore Ip Addresses</title><link>https://zalman0813.github.io/posts/restore-ip-addresses/</link><pubDate>Sun, 05 Mar 2023 08:16:16 +0800</pubDate><guid>https://zalman0813.github.io/posts/restore-ip-addresses/</guid><description>Link: https://leetcode.com/problems/restore-ip-addresses/
Status: done
Solution: backtracking
Code:
#Time Complexity: O(1) #Space Complexity: O(1) class Solution: def restoreIpAddresses(self, s: str) -&amp;gt; List[str]: if len(s) &amp;lt; 4 or len(s) &amp;gt; 12: return [] result = [] def backtracking(i, dots, curIp): if dots == 4 and i == len(s): result.append(curIp[:-1]) return if dots &amp;gt; 4: return for j in range(i, min(i+3,len(s))): if int(s[i:j+1]) &amp;lt;= 255 and (i == j or s[i] != &amp;#39;0&amp;#39;): backtracking(j+1, dots + 1, curIp + s[i:j+1] + &amp;#34;.</description></item><item><title>79. Word Search</title><link>https://zalman0813.github.io/posts/word-search/</link><pubDate>Sun, 05 Mar 2023 08:06:48 +0800</pubDate><guid>https://zalman0813.github.io/posts/word-search/</guid><description>Link: https://leetcode.com/problems/word-search/
Status: done
Solution: backtracking
Code:
#Time Complexity: O(n√ó3^l) #Space Complexity: O(l), , where l is the length of the word to be searched in the grid. class Solution: def word_search(self, grid, word): n = len(grid) if n &amp;lt; 1: return False m = len(grid[0]) if m &amp;lt; 1: return False for row in range(n): for col in range(m): if self.depth_first_search(row, col, grid, word): return True return False def depth_first_search(self,row, col, grid, word): if len(word) == 0: return True if row &amp;lt; 0 or row == len(grid) or col &amp;lt; 0 or col == len(grid[0]) \ or word[0].</description></item><item><title>51. N Queens</title><link>https://zalman0813.github.io/posts/n-queens/</link><pubDate>Sun, 05 Mar 2023 08:04:05 +0800</pubDate><guid>https://zalman0813.github.io/posts/n-queens/</guid><description>Link: https://leetcode.com/problems/n-queens/
Status: done
Solution: backtracking
Code:
#Time Complexity: O(n^2) #Space Complexity: O(n) class Solution: def mapping(self, n, i): pattern = [&amp;#34;.&amp;#34;]*n pattern[i] = &amp;#39;Q&amp;#39; return &amp;#34;&amp;#34;.join(pattern) def is_valid_move(self, proposed_row, proposed_col, solution): for i in range(proposed_row): old_row = i old_col = solution[i] diagonal_offset = proposed_row - old_row if (proposed_col == old_col or proposed_col + diagonal_offset == old_col or proposed_col - diagonal_offset == old_col): return False return True def backtracking(self, n, row, solution, results): if row == n: results.</description></item></channel></rss>