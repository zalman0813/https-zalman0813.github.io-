<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>two heaps on Pin Code Blog</title><link>https://zalman0813.github.io/tags/two-heaps/</link><description>Recent content in two heaps on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Jan 2023 19:28:37 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/two-heaps/index.xml" rel="self" type="application/rss+xml"/><item><title>295. Find Median From Data Stream</title><link>https://zalman0813.github.io/posts/find-median-from-data-stream/</link><pubDate>Sun, 15 Jan 2023 19:28:37 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-median-from-data-stream/</guid><description>Link: https://leetcode.com/problems/find-median-from-data-stream
Solution: two heaps Code:
# Time Complexity: # addNume: O(logn) # findMedian: O(1) # Space Complexity: O(n) from heapq import * class MedianFinder: def __init__(self): self.maxHeap = [] self.minHeap = [] def addNum(self, num: int) -&amp;gt; None if not self.maxHeap or -self.maxHeap[0] &amp;gt;= num: heappush(self.maxHeap, -num) else: heappush(self.minHeap, num) # more element than the min-heap # i.e. maxHeap [-5, -3, -1], minHeap [6, 7] if len(self.maxHeap) &amp;gt; len(self.minHeap) + 1: heappush(self.</description></item></channel></rss>