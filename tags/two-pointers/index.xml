<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>two pointers on Pin Code Blog</title><link>https://zalman0813.github.io/tags/two-pointers/</link><description>Recent content in two pointers on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Dec 2022 21:42:19 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/two-pointers/index.xml" rel="self" type="application/rss+xml"/><item><title>18. 4sum</title><link>https://zalman0813.github.io/posts/4sum/</link><pubDate>Sun, 25 Dec 2022 21:42:19 +0800</pubDate><guid>https://zalman0813.github.io/posts/4sum/</guid><description>Link: https://leetcode.com/problems/4sum
Status: done
Solution: two pointers
Code: Time Complexity: O(nlogn) + O(n^3) =&amp;gt; O(n)
Space Complexity: O(n)
class Solution: def fourSum(self, arr: List[int], target: int) -&amp;gt; List[List[int]]: quadruplets = [] # TODO: Write your code here arr.sort() for i in range(0, len(arr) - 3): if i &amp;gt; 0 and arr[i] == arr[i - 1]: continue for j in range(i + 1, len(arr) - 2): if j &amp;gt; i + 1 and arr[j] == arr[j - 1]: continue left = j + 1 right = len(arr) - 1 while left &amp;lt; right: target_sum = target - arr[i] - arr[j] - arr[left] - arr[right] if target_sum == 0: quadruplets.</description></item><item><title>844. Backspace String Compare</title><link>https://zalman0813.github.io/posts/backspace-string-compare/</link><pubDate>Sun, 25 Dec 2022 21:18:36 +0800</pubDate><guid>https://zalman0813.github.io/posts/backspace-string-compare/</guid><description>Link: https://leetcode.com/problems/backspace-string-compare/
Status: done
Solution: two pointers
Code: Time Complexity: O(n + m)
Space Complexity: O(1)
class Solution: def get_next_valid_char_index(self, str, index): backspace_count = 0 while (index &amp;gt;= 0): if str[index] == &amp;#39;#&amp;#39;: # found a backspace character backspace_count += 1 elif backspace_count &amp;gt; 0: # a non-backspace character backspace_count -= 1 else: break index -= 1 # skip a backspace or a valid character return index def backspaceCompare(self, s: str, t: str) -&amp;gt; bool: s_index = len(s) - 1 t_index = len(t) - 1 while s_index &amp;gt;= 0 or t_index &amp;gt;= 0: s_index = self.</description></item></channel></rss>