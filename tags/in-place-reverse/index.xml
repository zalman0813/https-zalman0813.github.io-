<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>in-place reverse on Pin Code Blog</title><link>https://zalman0813.github.io/tags/in-place-reverse/</link><description>Recent content in in-place reverse on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Jan 2023 16:44:33 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/in-place-reverse/index.xml" rel="self" type="application/rss+xml"/><item><title>61. Rotate List</title><link>https://zalman0813.github.io/posts/rotate-list/</link><pubDate>Sun, 08 Jan 2023 16:44:33 +0800</pubDate><guid>https://zalman0813.github.io/posts/rotate-list/</guid><description>Link: https://leetcode.com/problems/rotate-list
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def rotateRight(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 0 or not head: return head # find last node and length last_node = head list_length = 1 while last_node.next: last_node = last_node.</description></item><item><title>25. Reverse Nodes in K Group</title><link>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</link><pubDate>Sun, 08 Jan 2023 15:28:49 +0800</pubDate><guid>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</guid><description>Link: https://leetcode.com/problems/reverse-nodes-in-k-group
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseKGroup(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 1 or head is None: return head prev, cur = None, head while cur: last_node_of_last_part, last_node_of_cur_group = prev, cur #check if rest of nodes is less than k.</description></item></channel></rss>