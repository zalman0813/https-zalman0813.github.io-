<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sorted on Pin Code Blog</title><link>https://zalman0813.github.io/tags/sorted/</link><description>Recent content in sorted on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Feb 2023 22:00:13 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/sorted/index.xml" rel="self" type="application/rss+xml"/><item><title>881. Boats to Save People</title><link>https://zalman0813.github.io/posts/boats-to-save-people/</link><pubDate>Sun, 26 Feb 2023 22:00:13 +0800</pubDate><guid>https://zalman0813.github.io/posts/boats-to-save-people/</guid><description>Link: https://leetcode.com/problems/boats-to-save-people/description/
Solution: greedy
# Time Complexity: O(nlogn) # Space Complexity: O(n), n represents the memory required to sort this array. class Solution: def numRescueBoats(self, people: List[int], limit: int) -&amp;gt; int: people.sort() l = 0 r = len(people) - 1 boats = 0 while l &amp;lt;= r: if people[l] + people[r] &amp;lt;= limit: l += 1 r -= 1 boats += 1 return boats</description></item><item><title>1029. Two City Scheduling</title><link>https://zalman0813.github.io/posts/two-city-scheduling/</link><pubDate>Sun, 26 Feb 2023 21:56:28 +0800</pubDate><guid>https://zalman0813.github.io/posts/two-city-scheduling/</guid><description>Link: https://leetcode.com/problems/two-city-scheduling/
Solution: greedy
# Time Complexity: O(nlogn) # Space Complexity: O(m + n), m represents the memory required to sort this array. # Python uses a combination of merge sort and insertion sort which can sort the array in O(m) class Solution: def twoCitySchedCost(self, costs: List[List[int]]) -&amp;gt; int: diff = [] for costa, costb in costs: diff.append([costa - costb, costa, costb]) diff.sort() result = 0 tot = len(costs) for i in range(tot): if i &amp;gt;= tot / 2: result += diff[i][2] else: result += diff[i][1] return result</description></item><item><title>169. Majority Element</title><link>https://zalman0813.github.io/posts/majority-element/</link><pubDate>Thu, 24 Nov 2022 19:39:00 +0800</pubDate><guid>https://zalman0813.github.io/posts/majority-element/</guid><description>Link: https://leetcode.com/problems/majority-element/
Status: done
Solution: sorted, counting
Code:
sorted # Time Complexity: O(nlogn) # Space Complexity: O(1) class Solution: def majorityElement(self, nums: List[int]) -&amp;gt; int: nums.sort() # majority element that appears more than ⌊n / 2⌋ times, so mid will be the majority element. mid = len(nums) // 2 return nums[mid] counting # Time Complexity: O(n) # Space Complexity: O(1) class Solution: def majorityElement(self, nums: List[int]) -&amp;gt; int: res, counts = 0, 0 for n in nums: # When counts == 0, we initate res.</description></item></channel></rss>