<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tree on Pin Code Blog</title><link>https://zalman0813.github.io/tags/tree/</link><description>Recent content in tree on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Nov 2022 19:06:27 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml"/><item><title>Balanced Binary Tree</title><link>https://zalman0813.github.io/posts/balanced-binary-tree/</link><pubDate>Mon, 14 Nov 2022 19:06:27 +0800</pubDate><guid>https://zalman0813.github.io/posts/balanced-binary-tree/</guid><description>Solution: dfs
Code:
def isBalanced(self, root: Optional[TreeNode]) -&amp;gt; bool: # use dfs to dive and conquer to find [balanced, height] for each child node. def dfs(root): if not root: return [True, 0] left, right = dfs(root.left), dfs(root.right) balanced = left[0] and right[0] and abs(left[1] - right[1]) &amp;lt;= 1 return [ balanced, 1 + max(left[1], right[1])] return dfs(root)[0] Time Complexity: O(n)
Space Complexity: O(n)</description></item></channel></rss>