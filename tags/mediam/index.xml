<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mediam on Pin Code Blog</title><link>https://zalman0813.github.io/tags/mediam/</link><description>Recent content in mediam on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Jan 2023 23:19:45 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/mediam/index.xml" rel="self" type="application/rss+xml"/><item><title>437. Path Sum Iii</title><link>https://zalman0813.github.io/posts/path-sum-iii/</link><pubDate>Sun, 15 Jan 2023 23:19:45 +0800</pubDate><guid>https://zalman0813.github.io/posts/path-sum-iii/</guid><description>Link: https://leetcode.com/problems/path-sum-iii/
Solution: DFS Code:
# Time Complexity: O(n) # Space Complexity: O(n) def count_paths(root, S): # TODO: Write your code here m = {} return count_paths_recursive(root, S, m, 0) def count_paths_recursive(curNode, S, cached, curPathSum): if not curNode: return 0 curPathSum += curNode.val path_count = 0 if curPathSum == S: path_count += 1 path_count += cached.get(curPathSum - S, 0) cached[curPathSum] = cached.get(curPathSum, 0) + 1 path_count += count_paths_recursive(curNode.left, S, cached, curPathSum) path_count += count_paths_recursive(curNode.</description></item></channel></rss>