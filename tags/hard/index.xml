<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hard on Pin Code Blog</title><link>https://zalman0813.github.io/tags/hard/</link><description>Recent content in hard on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Jan 2023 19:28:37 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/hard/index.xml" rel="self" type="application/rss+xml"/><item><title>295. Find Median From Data Stream</title><link>https://zalman0813.github.io/posts/find-median-from-data-stream/</link><pubDate>Sun, 15 Jan 2023 19:28:37 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-median-from-data-stream/</guid><description>Link: https://leetcode.com/problems/find-median-from-data-stream
Solution: two heaps Code:
# Time Complexity: # addNume: O(logn) # findMedian: O(1) # Space Complexity: O(n) from heapq import * class MedianFinder: def __init__(self): self.maxHeap = [] self.minHeap = [] def addNum(self, num: int) -&amp;gt; None if not self.maxHeap or -self.maxHeap[0] &amp;gt;= num: heappush(self.maxHeap, -num) else: heappush(self.minHeap, num) # more element than the min-heap # i.e. maxHeap [-5, -3, -1], minHeap [6, 7] if len(self.maxHeap) &amp;gt; len(self.minHeap) + 1: heappush(self.</description></item><item><title>124. Binary Tree Maximum Path Sum</title><link>https://zalman0813.github.io/posts/binary-tree-maximum-path-sum/</link><pubDate>Sat, 14 Jan 2023 22:10:29 +0800</pubDate><guid>https://zalman0813.github.io/posts/binary-tree-maximum-path-sum/</guid><description>Link: https://leetcode.com/problems/binary-tree-maximum-path-sum
Solution: dfs Code:
# Time Complexity: O(n) # Space Complexity: O(n) # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def maxPathSum(self, root: Optional[TreeNode]) -&amp;gt; int: self.globalPathSum = -math.inf self.pathRecursive(root) return self.maxDiameter def pathRecursive(self, curNode): if not curNode: return 0 maxPathSumFromLeftNode = self.pathRecursive(curNode.left) maxPathSumFromRightNode = self.pathRecursive(curNode.right) # ignore paths with negative sums, since we need to find thhe maximum sum we should # ignore any path which has an overall negative sum.</description></item><item><title>25. Reverse Nodes in K Group</title><link>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</link><pubDate>Sun, 08 Jan 2023 15:28:49 +0800</pubDate><guid>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</guid><description>Link: https://leetcode.com/problems/reverse-nodes-in-k-group
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseKGroup(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 1 or head is None: return head prev, cur = None, head while cur: last_node_of_last_part, last_node_of_cur_group = prev, cur #check if rest of nodes is less than k.</description></item><item><title>42. First Missing Positive</title><link>https://zalman0813.github.io/posts/first-missing-positive/</link><pubDate>Sat, 07 Jan 2023 21:57:48 +0800</pubDate><guid>https://zalman0813.github.io/posts/first-missing-positive/</guid><description>Link: https://leetcode.com/problems/first-missing-positive
Solution: cyclic sort
Code:
# Time Complexity: O(n) # Space Complexity: O(1) class Solution: def firstMissingPositive(self, nums: List[int]) -&amp;gt; int: i = 0 n = len(nums) while i &amp;lt; n: j = nums[i] - 1 if nums[i] &amp;gt; 0 and nums[i] &amp;lt;= n and nums[i] != nums[j]: nums[i], nums[j] = nums[j], nums[i] else: i += 1 for i in range(n): if nums[i] != i + 1: return i + 1 # if missing number is over n, it&amp;#39;s as n + 1 return n + 1</description></item></channel></rss>