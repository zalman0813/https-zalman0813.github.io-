<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hard on Pin Code Blog</title><link>https://zalman0813.github.io/tags/hard/</link><description>Recent content in hard on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 11:16:44 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/hard/index.xml" rel="self" type="application/rss+xml"/><item><title>4. Median of Two Sorted Arrays</title><link>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</link><pubDate>Sun, 12 Feb 2023 11:16:44 +0800</pubDate><guid>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</guid><description>Link: https://leetcode.com/problems/median-of-two-sorted-arrays/
Solution: k-ways merge
Code:
# Time Complexity: O(log(min(m,n))) # Space Complexity: O(1) class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&amp;gt; float: if len(nums1) &amp;gt; len(nums2): return self.findMedianSortedArrays(nums2, nums1) if len(nums1) == 0: if len(nums2) % 2 == 0: return (nums2[len(nums2)//2 - 1] + nums2[len(nums2)//2])/2 else: return nums2[len(nums2)//2] tot_len = len(nums1) + len(nums2) start, end = 0, len(nums1) while start &amp;lt;= end: cut_1 = (start + end) // 2 cut_2 = (tot_len + 1) // 2 - cut_1 left_1 = float(-inf) if cut_1 == 0 else nums1[cut_1 - 1] right_1 = float(inf) if cut_1 == len(nums1) else nums1[cut_1] left_2 = float(-inf) if cut_2 == 0 else nums2[cut_2 - 1] right_2 = float(inf) if cut_2 == len(nums2) else nums2[cut_2] if left_1 &amp;gt; right_2: end = cut_1 - 1 elif left_2 &amp;gt; right_1: start = cut_1 + 1 else: if tot_len % 2 == 0: return (max(left_1, left_2) + min(right_1, right_2)) / 2 else: return max(left_1, left_2) return -1</description></item><item><title>23. Merge K Sorted Lists</title><link>https://zalman0813.github.io/posts/merge-k-sorted-lists/</link><pubDate>Sun, 05 Feb 2023 23:13:17 +0800</pubDate><guid>https://zalman0813.github.io/posts/merge-k-sorted-lists/</guid><description>Link: https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/
Solution: K-way merge
Code: K-way merge
# Time Complexity: O(nlogk), where k is the number of lists and n is the max length of a single list # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def merge_2_lists(self, head1, head2): dummy = ListNode(-1) prev = dummy # set prev pointer to dummy node # traverse over the lists until both or one of them becomes null while head1 and head2: if head1.</description></item><item><title>30. Substring With Concatenation of All Words</title><link>https://zalman0813.github.io/posts/substring-with-concatenation-of-all-words/</link><pubDate>Sun, 22 Jan 2023 19:31:04 +0800</pubDate><guid>https://zalman0813.github.io/posts/substring-with-concatenation-of-all-words/</guid><description>Link: https://leetcode.com/problems/substring-with-concatenation-of-all-words
Solution: sliding windows
Code:
# O(n∗m∗len) where ‘n’ is the number of characters in the given string, ‘m’ is the total number of words, and ‘len’ is the length of a word. # Space Complexity: O(n+m) class Solution: def findSubstring(self, str1: str, words: List[str]) -&amp;gt; List[int]: result_indices = [] # TODO: Write your code here word_freq = Counter(words) word_count = len(words) word_length = len(words[0]) for i in range((len(str1) - word_count * word_length) + 1): word_seen = {} for j in range(word_count): next_word_index = i + j * word_length # if not equal to the word # Get the next word from the string word = str1[next_word_index: next_word_index + word_length] if word not in word_freq: # Break if we don&amp;#39;t need this word break word_seen[word] = 1 + word_seen.</description></item><item><title>436. Find Right Interval</title><link>https://zalman0813.github.io/posts/find-right-interval/</link><pubDate>Sun, 22 Jan 2023 13:12:57 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-right-interval/</guid><description>Link: https://leetcode.com/problems/find-right-interval/
Solution: two heaps
Code:
# Time Complexity: O(nlogn) # Space Complexity: O(n) class Solution: def findRightInterval(self, intervals: List[List[int]]) -&amp;gt; List[int]: n = len(intervals) # heaps for finding the maximum start and end maxStartHeap, maxEndHeap = [], [] result = [0 for x in range(n)] for endIndex in range(n): heappush(maxStartHeap, (-intervals[endIndex][0], endIndex)) heappush(maxEndHeap, (-intervals[endIndex][1], endIndex)) # go through all the intervals to find each interval&amp;#39;s next interval for _ in range(n): # let&amp;#39;s find the next interval of the interval which has the highest &amp;#39;end&amp;#39; topEnd, endIndex = heappop(maxEndHeap) result[endIndex] = -1 # defaults to - 1 if -maxStartHeap[0][0] &amp;gt;= -topEnd: topStart, startIndex = heappop(maxStartHeap) # find the the interval that has the closest &amp;#39;start&amp;#39; while maxStartHeap and -maxStartHeap[0][0] &amp;gt;= -topEnd: topStart, startIndex = heappop(maxStartHeap) result[endIndex] = startIndex # put the interval back as it could be the next interval of other intervals heappush(maxStartHeap, (topStart, startIndex)) return result</description></item><item><title>502. Ipo</title><link>https://zalman0813.github.io/posts/ipo/</link><pubDate>Sat, 21 Jan 2023 16:44:56 +0800</pubDate><guid>https://zalman0813.github.io/posts/ipo/</guid><description>Link: https://leetcode.com/problems/ipo/
Solution: two heaps
Code: two heaps
# Time Complexity: O(nlogn + klogn) , n is the total number of projects, k is the total number of projects we are selecting # Space Complexity: O(n) from heapq import * class Solution: def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -&amp;gt; int: minCapitalHeap = [] maxProfitHeap = [] # add all projects into minHeap, so that we can select a project with the smallest capital requirement.</description></item><item><title>295. Find Median From Data Stream</title><link>https://zalman0813.github.io/posts/find-median-from-data-stream/</link><pubDate>Sun, 15 Jan 2023 19:28:37 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-median-from-data-stream/</guid><description>Link: https://leetcode.com/problems/find-median-from-data-stream
Solution: two heaps Code:
# Time Complexity: # addNume: O(logn) # findMedian: O(1) # Space Complexity: O(n) from heapq import * class MedianFinder: def __init__(self): self.maxHeap = [] self.minHeap = [] def addNum(self, num: int) -&amp;gt; None if not self.maxHeap or -self.maxHeap[0] &amp;gt;= num: heappush(self.maxHeap, -num) else: heappush(self.minHeap, num) # more element than the min-heap # i.e. maxHeap [-5, -3, -1], minHeap [6, 7] if len(self.maxHeap) &amp;gt; len(self.minHeap) + 1: heappush(self.</description></item><item><title>124. Binary Tree Maximum Path Sum</title><link>https://zalman0813.github.io/posts/binary-tree-maximum-path-sum/</link><pubDate>Sat, 14 Jan 2023 22:10:29 +0800</pubDate><guid>https://zalman0813.github.io/posts/binary-tree-maximum-path-sum/</guid><description>Link: https://leetcode.com/problems/binary-tree-maximum-path-sum
Solution: dfs Code:
# Time Complexity: O(n) # Space Complexity: O(n) # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def maxPathSum(self, root: Optional[TreeNode]) -&amp;gt; int: self.globalPathSum = -math.inf self.pathRecursive(root) return self.maxDiameter def pathRecursive(self, curNode): if not curNode: return 0 maxPathSumFromLeftNode = self.pathRecursive(curNode.left) maxPathSumFromRightNode = self.pathRecursive(curNode.right) # ignore paths with negative sums, since we need to find thhe maximum sum we should # ignore any path which has an overall negative sum.</description></item><item><title>25. Reverse Nodes in K Group</title><link>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</link><pubDate>Sun, 08 Jan 2023 15:28:49 +0800</pubDate><guid>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</guid><description>Link: https://leetcode.com/problems/reverse-nodes-in-k-group
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseKGroup(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 1 or head is None: return head prev, cur = None, head while cur: last_node_of_last_part, last_node_of_cur_group = prev, cur #check if rest of nodes is less than k.</description></item><item><title>42. First Missing Positive</title><link>https://zalman0813.github.io/posts/first-missing-positive/</link><pubDate>Sat, 07 Jan 2023 21:57:48 +0800</pubDate><guid>https://zalman0813.github.io/posts/first-missing-positive/</guid><description>Link: https://leetcode.com/problems/first-missing-positive
Solution: cyclic sort
Code:
# Time Complexity: O(n) # Space Complexity: O(1) class Solution: def firstMissingPositive(self, nums: List[int]) -&amp;gt; int: i = 0 n = len(nums) while i &amp;lt; n: j = nums[i] - 1 if nums[i] &amp;gt; 0 and nums[i] &amp;lt;= n and nums[i] != nums[j]: nums[i], nums[j] = nums[j], nums[i] else: i += 1 for i in range(n): if nums[i] != i + 1: return i + 1 # if missing number is over n, it&amp;#39;s as n + 1 return n + 1</description></item></channel></rss>