<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>binary search on Pin Code Blog</title><link>https://zalman0813.github.io/tags/binary-search/</link><description>Recent content in binary search on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Feb 2023 17:43:27 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/binary-search/index.xml" rel="self" type="application/rss+xml"/><item><title>81. Search in Rotated Sorted Array Ii</title><link>https://zalman0813.github.io/posts/search-in-rotated-sorted-array-ii/</link><pubDate>Sun, 19 Feb 2023 17:43:27 +0800</pubDate><guid>https://zalman0813.github.io/posts/search-in-rotated-sorted-array-ii/</guid><description>Link: https://leetcode.com/problems/search-in-rotated-sorted-array-ii
Solution: binary search
# Time Complexity: O(log(n)) # Space Complexity: O(1) class Solution: def search(self, nums: List[int], target: int) -&amp;gt; bool: if len(nums) == 1: if nums[0] == target: return True else: return False l, r = 0, len(nums) - 1 while l &amp;lt;= r: # shifting to remove duplicate elements while l&amp;lt;r and nums[l] == nums[l+1]: l+=1 while l&amp;lt;r and nums[r] == nums[r-1]: r-=1 mid = (l + r) // 2 if target == nums[mid]: return True if nums[l] &amp;lt;= nums[mid]: if target &amp;gt;= nums[l] and target &amp;lt; nums[mid]: r = mid - 1 else: l = mid + 1 else: if target &amp;gt; nums[mid] and target &amp;lt;= nums[r]: l = mid + 1 else: r = mid - 1 return False</description></item><item><title>540. Single Element in a Sorted Array</title><link>https://zalman0813.github.io/posts/single-element-in-a-sorted-array/</link><pubDate>Sun, 19 Feb 2023 17:17:20 +0800</pubDate><guid>https://zalman0813.github.io/posts/single-element-in-a-sorted-array/</guid><description>Link: https://leetcode.com/problems/single-element-in-a-sorted-array/
Solution: binary search
# Time Complexity: O(log(n)) # Space Complexity: O(1) class Solution: def singleNonDuplicate(self, nums: List[int]) -&amp;gt; int: l, r = 0, len(nums) - 1 while l &amp;lt; r: m = l + (r-l)//2 # use the pair arrangement propert. even is equalt to next odd until an unpaired number appears, # If the element at mid and mid + 1 are the same then # the single element must appear after the mid point # Otherwise we must search before the mid point if m % 2 == 1: m -= 1 # to preceding even index if nums[m] == nums[m + 1]: l = m + 2 else: r = m return nums[l]</description></item><item><title>528. Random Pick With Weight</title><link>https://zalman0813.github.io/posts/random-pick-with-weight/</link><pubDate>Sun, 19 Feb 2023 17:05:57 +0800</pubDate><guid>https://zalman0813.github.io/posts/random-pick-with-weight/</guid><description>Link: https://leetcode.com/problems/random-pick-with-weight/
Solution: binary search
# Time Complexity: # 1. Construct: O(n) # 2. pickIndex: o(logn) # Space Complexity: # 1. Construct: O(n) # 2. pickIndex: O(1) class Solution: def __init__(self, w: List[int]): self.cum_sums = [] cum = 0 for i in range(len(w)): cum += w[i] self.cum_sums.append(cum) def pickIndex(self) -&amp;gt; int: target = random.randint(1, self.cum_sums[-1]) # Assigning low pointer at the start of the array low = 0 # Assigning high pointer at the end of the array high = len(self.</description></item><item><title>658. Find K Closest Elements</title><link>https://zalman0813.github.io/posts/find-k-closest-elements/</link><pubDate>Sun, 19 Feb 2023 16:44:39 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-k-closest-elements/</guid><description>Link: https://leetcode.com/problems/find-k-closest-elements/description/
Solution: binary search
# Time Complexity: O(log(n-k)) # Space Complexity: O(1) class Solution: def findClosestElements(self, arr: List[int], k: int, x: int) -&amp;gt; List[int]: l, r = 0, len(arr) - k while l &amp;lt; r: m = l + (r - l) // 2 if x - arr[m] &amp;gt; arr[m+k] - x: l = m + 1 else: r = m return arr[l:l+k]</description></item><item><title>4. Median of Two Sorted Arrays</title><link>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</link><pubDate>Sun, 12 Feb 2023 11:16:44 +0800</pubDate><guid>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</guid><description>Link: https://leetcode.com/problems/median-of-two-sorted-arrays/
Solution: k-ways merge
Code:
# Time Complexity: O(log(min(m,n))) # Space Complexity: O(1) class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&amp;gt; float: if len(nums1) &amp;gt; len(nums2): return self.findMedianSortedArrays(nums2, nums1) if len(nums1) == 0: if len(nums2) % 2 == 0: return (nums2[len(nums2)//2 - 1] + nums2[len(nums2)//2])/2 else: return nums2[len(nums2)//2] tot_len = len(nums1) + len(nums2) start, end = 0, len(nums1) while start &amp;lt;= end: cut_1 = (start + end) // 2 cut_2 = (tot_len + 1) // 2 - cut_1 left_1 = float(-inf) if cut_1 == 0 else nums1[cut_1 - 1] right_1 = float(inf) if cut_1 == len(nums1) else nums1[cut_1] left_2 = float(-inf) if cut_2 == 0 else nums2[cut_2 - 1] right_2 = float(inf) if cut_2 == len(nums2) else nums2[cut_2] if left_1 &amp;gt; right_2: end = cut_1 - 1 elif left_2 &amp;gt; right_1: start = cut_1 + 1 else: if tot_len % 2 == 0: return (max(left_1, left_2) + min(right_1, right_2)) / 2 else: return max(left_1, left_2) return -1</description></item><item><title>278. First Bad Version</title><link>https://zalman0813.github.io/posts/first-bad-version/</link><pubDate>Thu, 17 Nov 2022 20:49:28 +0800</pubDate><guid>https://zalman0813.github.io/posts/first-bad-version/</guid><description>Link: https://leetcode.com/problems/first-bad-version/
Solution: binary search
Code:
class Solution: def firstBadVersion(self, n: int) -&amp;gt; int: l, r = 1, n # Find whether the mid version is bad or not # keep r as m is True, # F, F, T ,T , T # l-&amp;gt; m r # l r # l-&amp;gt; # l from false to true, so final l position as minBadVersion while l &amp;lt; r: m = l + (r-l) // 2 # avoid overflow if isBadVersion(m): r = m else: l = m + 1 return l Time Complexity: O(logn)</description></item></channel></rss>