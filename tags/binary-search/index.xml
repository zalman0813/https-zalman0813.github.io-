<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>binary search on Pin Code Blog</title><link>https://zalman0813.github.io/tags/binary-search/</link><description>Recent content in binary search on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Nov 2022 20:49:28 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/binary-search/index.xml" rel="self" type="application/rss+xml"/><item><title>278. First Bad Version</title><link>https://zalman0813.github.io/posts/first-bad-version/</link><pubDate>Thu, 17 Nov 2022 20:49:28 +0800</pubDate><guid>https://zalman0813.github.io/posts/first-bad-version/</guid><description>Link: https://leetcode.com/problems/first-bad-version/
Solution: binary search
Code:
class Solution: def firstBadVersion(self, n: int) -&amp;gt; int: l, r = 1, n # Find whether the mid version is bad or not # keep r as m is True, # F, F, T ,T , T # l-&amp;gt; m r # l r # l-&amp;gt; # l from false to true, so final l position as minBadVersion while l &amp;lt; r: m = l + (r-l) // 2 # avoid overflow if isBadVersion(m): r = m else: l = m + 1 return l Time Complexity: O(logn)</description></item></channel></rss>