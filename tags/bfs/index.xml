<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bfs on Pin Code Blog</title><link>https://zalman0813.github.io/tags/bfs/</link><description>Recent content in bfs on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Feb 2023 23:28:13 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/bfs/index.xml" rel="self" type="application/rss+xml"/><item><title>1730. Shortest Path to Get Food</title><link>https://zalman0813.github.io/posts/shortest-path-to-get-food/</link><pubDate>Sun, 05 Feb 2023 23:28:13 +0800</pubDate><guid>https://zalman0813.github.io/posts/shortest-path-to-get-food/</guid><description>Link: https://leetcode.com/problems/shortest-path-to-get-food/
Solution: bfs
Code: bfs
# Time Complexity: O(m*n) # Space Complexity: O(m*n) class Solution: def getFood(self, grid): ROWS, COLS = len(grid), len(grid[0]) visit, queue = set(), collections.deque() for r in range(ROWS): for c in range(COLS): if grid[r][c] == &amp;#39;*&amp;#39;: queue.append((r,c, 0)) visit.add((r,c)) break directions = [(1,0),(0,-1), (-1,0), (0,1)] while queue: cur_r, cur_c, steps = queue.popleft() if grid[cur_r][cur_c] == &amp;#39;#&amp;#39;: return steps else: for dr,dc in directions: new_r, new_c = r + dr, c + dc if (0&amp;lt;=new_r&amp;lt;ROWS) and (0&amp;lt;=new_c&amp;lt;COLS) and grid[new_r][new_c] !</description></item><item><title>117. Populating Next Right Pointers in Each Node</title><link>https://zalman0813.github.io/posts/populating-next-right-pointers-in-each-node/</link><pubDate>Sun, 15 Jan 2023 23:38:24 +0800</pubDate><guid>https://zalman0813.github.io/posts/populating-next-right-pointers-in-each-node/</guid><description>Link: https://leetcode.com/problems/populating-next-right-pointers-in-each-node
Solution: BFS Code:
# Time Complexity: O(n) # Space Complexity: O(n) &amp;#34;&amp;#34;&amp;#34; # Definition for a Node. class Node: def __init__(self, val: int = 0, left: &amp;#39;Node&amp;#39; = None, right: &amp;#39;Node&amp;#39; = None, next: &amp;#39;Node&amp;#39; = None): self.val = val self.left = left self.right = right self.next = next &amp;#34;&amp;#34;&amp;#34; class Solution: def connect(self, root: &amp;#39;Optional[Node]&amp;#39;) -&amp;gt; &amp;#39;Optional[Node]&amp;#39;: if not root: return None q = deque() q.append(root) while q: prevNode = None for _ in range(len(q)): curNode = q.</description></item><item><title>199. Binary Tree Right Side View</title><link>https://zalman0813.github.io/posts/binary-tree-right-side-view/</link><pubDate>Sat, 14 Jan 2023 22:24:32 +0800</pubDate><guid>https://zalman0813.github.io/posts/binary-tree-right-side-view/</guid><description>Link: https://leetcode.com/problems/binary-tree-maximum-path-sum
Solution: dfs Code:
# Time Complexity: O(n) # Space Complexity: O(n) # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right from collections import deque class Solution: def rightSideView(self, root: Optional[TreeNode]) -&amp;gt; List[int]: if not root: return [] result = [] q = deque() q.append(root) while q: for i in range(len(q)): curNode = q.</description></item></channel></rss>