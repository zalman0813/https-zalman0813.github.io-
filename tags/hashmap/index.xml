<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hashmap on Pin Code Blog</title><link>https://zalman0813.github.io/tags/hashmap/</link><description>Recent content in hashmap on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 09 Dec 2022 19:28:08 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>217. Contains Duplicate</title><link>https://zalman0813.github.io/posts/contains-duplicate/</link><pubDate>Fri, 09 Dec 2022 19:28:08 +0800</pubDate><guid>https://zalman0813.github.io/posts/contains-duplicate/</guid><description>Solution: hashmap
Code:
# Time Complexity: O(n) # Space Complexity: O(n) class Solution: def containsDuplicate(self, nums: List[int]) -&amp;gt; bool: count = {} for n in nums: if n in count: return True else: count[n] = 1 return False # Time Complexity: O(n) # Space Complexity: O(n) class Solution: def containsDuplicate(self, nums: List[int]) -&amp;gt; bool: return len(set(nums)) != len(nums)</description></item><item><title>409. Longest Palindrome</title><link>https://zalman0813.github.io/posts/longest-palindrome/</link><pubDate>Tue, 22 Nov 2022 23:12:44 +0800</pubDate><guid>https://zalman0813.github.io/posts/longest-palindrome/</guid><description>Link: https://leetcode.com/problems/longest-palindrome/
Solution: hashmap
Code:
# Time Complexity: O(n) # Space Complexity: O(n) class Solution: def longestPalindrome(self, s: str) -&amp;gt; int: if len(s) == 1: return 1 char_freq = collections.Counter(s) length = 0 for count in char_freq.values(): # add max even count of all chars length += count // 2 * 2 # if string includes odd char,length + 1 [can choose only one odd count] # if total chars are event counts, return original string length return min(length + 1, len(s))</description></item><item><title>383. Ransom Note</title><link>https://zalman0813.github.io/posts/ransom-note/</link><pubDate>Fri, 18 Nov 2022 21:11:51 +0800</pubDate><guid>https://zalman0813.github.io/posts/ransom-note/</guid><description>Link: https://leetcode.com/problems/ransom-note/
Status: done
Solution: hashmap
Code:
# n - magazine size ,m - ransomNote size # Time Complexity: O(n + m) -&amp;gt; O(n), if true, n &amp;gt;= m # Space Complexity: O(n) class Solution: def canConstruct(self, ransomNote: str, magazine: str) -&amp;gt; bool: if len(ransomNote) &amp;gt; len(magazine): return False mMap = {} for c in magazine: mMap[c] = 1 + mMap.get(c, 0) for char in ransomNote: if char in mMap and mMap[char] &amp;gt; 0: mMap[char] -= 1 else: return False return True</description></item><item><title>Valid Anagram</title><link>https://zalman0813.github.io/posts/valid-anagram/</link><pubDate>Tue, 08 Nov 2022 23:12:06 +0800</pubDate><guid>https://zalman0813.github.io/posts/valid-anagram/</guid><description>Solution: hashmap
Code:
class Solution: def isAnagram(self, s: str, t: str) -&amp;gt; bool: return Counter(s) == Counter(t) Time Complexity: O(n) Space Complexity: O(n)
Link: https://leetcode.com/problems/valid-anagram/</description></item><item><title>20. Valid Parenthess</title><link>https://zalman0813.github.io/posts/valid-parenthess/</link><pubDate>Tue, 01 Nov 2022 21:38:19 +0800</pubDate><guid>https://zalman0813.github.io/posts/valid-parenthess/</guid><description>Link: https://leetcode.com/problems/valid-parentheses/
Tags: 169, easy, stack
Status: Done
Solution: Stack
Code:
class Solution: def isValid(self, s: str) -&amp;gt; bool: stack = [] Map = {&amp;#34;)&amp;#34;: &amp;#34;(&amp;#34;, &amp;#34;]&amp;#34;: &amp;#34;[&amp;#34;, &amp;#34;}&amp;#34;: &amp;#34;{&amp;#34;} for char in s: if char in Map: if stack and stack[-1] == Map[char]: stack.pop() else: return False else: stack.append(char) return True if not stack else False Time Complexity: O(n)
Space Complexity:O(n)</description></item><item><title>1.two Sum</title><link>https://zalman0813.github.io/posts/two-sum/</link><pubDate>Mon, 31 Oct 2022 22:01:45 +0800</pubDate><guid>https://zalman0813.github.io/posts/two-sum/</guid><description>Solution: HashMap, Two Pointer
Note:
hashmap: dictionay to store key as num, value as index. tow pointer: sorted and find original index. Need to consider the same value Code:
hashmap class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: hashMap = {} for i, num in enumerate(nums): rest = target - num if rest in hashMap: return [i, hashMap[rest] ] hashMap[num] = i Time Complexity: O(n) Space Complexity: O(n)</description></item></channel></rss>