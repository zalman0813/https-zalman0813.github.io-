<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>K-way merge on Pin Code Blog</title><link>https://zalman0813.github.io/tags/k-way-merge/</link><description>Recent content in K-way merge on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Feb 2023 23:13:17 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/k-way-merge/index.xml" rel="self" type="application/rss+xml"/><item><title>23. Merge K Sorted Lists</title><link>https://zalman0813.github.io/posts/merge-k-sorted-lists/</link><pubDate>Sun, 05 Feb 2023 23:13:17 +0800</pubDate><guid>https://zalman0813.github.io/posts/merge-k-sorted-lists/</guid><description>Link: https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/
Solution: K-way merge
Code: K-way merge
# Time Complexity: O(nlogk), where k is the number of lists and n is the max length of a single list # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def merge_2_lists(self, head1, head2): dummy = ListNode(-1) prev = dummy # set prev pointer to dummy node # traverse over the lists until both or one of them becomes null while head1 and head2: if head1.</description></item><item><title>373. Find K Pairs With Smallest Sums</title><link>https://zalman0813.github.io/posts/find-k-pairs-with-smallest-sums/</link><pubDate>Sun, 05 Feb 2023 21:28:17 +0800</pubDate><guid>https://zalman0813.github.io/posts/find-k-pairs-with-smallest-sums/</guid><description>Link: https://leetcode.com/problems/find-k-pairs-with-smallest-sums
Solution: K-way merge
Code: K-way merge
# Time Complexity: O(mlogm + klogm) -&amp;gt; (m + k)logm # Space Complexity: O(m), where m = min(k, n1) class Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -&amp;gt; List[List[int]]: result = [] minHeap = [] # pop &amp;amp; push for i in range(min(k,len(nums1))): heappush(minHeap, (nums1[i]+nums2[0], i, 0)) counter = 1 while counter &amp;lt;= k and minHeap: _, i1, i2 = heappop(minHeap) result.</description></item><item><title>378. Kth Smallest Element in a Sorted Matrix</title><link>https://zalman0813.github.io/posts/kth-smallest-element-in-a-sorted-matrix/</link><pubDate>Fri, 03 Feb 2023 22:34:00 +0800</pubDate><guid>https://zalman0813.github.io/posts/kth-smallest-element-in-a-sorted-matrix/</guid><description>Link: https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/
Solution: K-way merge
Code: K-way merge
# Time Complexity: O(nlogn+(klogn))=O((n+k)logn) # Space Complexity: O(n*n) class Solution: def kthSmallest(self, matrix: List[List[int]], k: int) -&amp;gt; int: # TODO: Write your code here minHeap = [] # firstly, insert (first elemetn of list, index of fist element, list) for l in matrix: heappush(minHeap, (l[0], 0, l)) for _ in range(k - 1): value, index, l = heappop(minHeap) index += 1 if index &amp;lt; len(l): heappush(minHeap, (l[index], index, l)) value, _, _ = heappop(minHeap) return value</description></item></channel></rss>