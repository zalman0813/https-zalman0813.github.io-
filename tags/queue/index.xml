<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>queue on Pin Code Blog</title><link>https://zalman0813.github.io/tags/queue/</link><description>Recent content in queue on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Nov 2022 23:32:10 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/queue/index.xml" rel="self" type="application/rss+xml"/><item><title>232. Implement Queue using Stacks</title><link>https://zalman0813.github.io/posts/implement-queue-using-stacks/</link><pubDate>Wed, 16 Nov 2022 23:32:10 +0800</pubDate><guid>https://zalman0813.github.io/posts/implement-queue-using-stacks/</guid><description>Link: https://leetcode.com/problems/implement-queue-using-stacks/
Solution: stack
Code: two stack
# Time Complexity: O(1) # Space Complexity: O(n) class MyQueue: def __init__(self): self.inStack = [] self.outStack = [] def push(self, x: int) -&amp;gt; None: self.inStack.append(x) return self def pop(self) -&amp;gt; int: self.move() return self.outStack.pop() def peek(self) -&amp;gt; int: self.move() return self.outStack[-1] def empty(self) -&amp;gt; bool: return (not self.inStack) and (not self.outStack) def move(self): if not self.outStack: while self.inStack: self.outStack.append(self.inStack.pop())</description></item></channel></rss>