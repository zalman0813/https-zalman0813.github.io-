<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lcs on Pin Code Blog</title><link>https://zalman0813.github.io/tags/lcs/</link><description>Recent content in lcs on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Apr 2023 17:46:33 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/lcs/index.xml" rel="self" type="application/rss+xml"/><item><title>72. Edit Distance</title><link>https://zalman0813.github.io/posts/edit-distance/</link><pubDate>Sun, 09 Apr 2023 17:46:33 +0800</pubDate><guid>https://zalman0813.github.io/posts/edit-distance/</guid><description>Link: https://leetcode.com/problems/edit-distance/description/
Code:
# Time Complexity: O(n^2), where n is the length of the longest string. # Space Complexity: O(n^2) class Solution: def minDistance(self, str1: str, str2: str) -&amp;gt; int: dp = [[-1 for i in range(len(str2) + 1)] for j in range(len(str1)+1)] for i in range(len(str1)+1): dp[i][0] = i for j in range(len(str2)+1): dp[0][j] = j for i in range(1, len(str1)+1): for j in range(1, len(str2)+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min( dp[i-1][j-1], # replace dp[i][j-1], # deletion dp[i-1][j] # insertion ) return dp[-1][-1]</description></item></channel></rss>