<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dp on Pin Code Blog</title><link>https://zalman0813.github.io/tags/dp/</link><description>Recent content in dp on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Mar 2023 22:19:10 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml"/><item><title>70. Climbing Stairs</title><link>https://zalman0813.github.io/posts/climbing-stairs/</link><pubDate>Sun, 12 Mar 2023 22:19:10 +0800</pubDate><guid>https://zalman0813.github.io/posts/climbing-stairs/</guid><description>Link: https://leetcode.com/problems/climbing-stairs/
Status: done
Solution: dp-bottom up
Code:
#Time Complexity: O(n) #Space Complexity: O(1) class Solution: def climbStairs(self, n: int) -&amp;gt; int: one = 1 two = 1 # n = 5 # [8,5,3,2,1,1] 4 times -&amp;gt; n - 1 for i in range(n - 1): tmp = one one = one + two two = tmp return one</description></item><item><title>1891. Cutting Ribbons</title><link>https://zalman0813.github.io/posts/cutting-ribbons/</link><pubDate>Sun, 12 Mar 2023 22:15:29 +0800</pubDate><guid>https://zalman0813.github.io/posts/cutting-ribbons/</guid><description>Link: https://leetcode.com/problems/cutting-ribbons/
Status: done
Solution: dp-bottom up
Code:
#Time Complexity: O(n*k), where k is sizes.length #Space Complexity: O(n) def count_ribbon_pieces(n, sizes): # create the array to store the results dp = [-1]*(n+1) dp[0] = 0 # calculate the results for all combinations # and select the maximum for i in range(1, n+1): for c in sizes: if i-c &amp;gt;= 0 and dp[i-c] != -1: dp[i] = max(dp[i], 1 + dp[i-c]) if dp[n] !</description></item><item><title>416. Partition Equal Subset Sum</title><link>https://zalman0813.github.io/posts/partition-equal-subset-sum/</link><pubDate>Sun, 12 Mar 2023 21:58:49 +0800</pubDate><guid>https://zalman0813.github.io/posts/partition-equal-subset-sum/</guid><description>Link: https://leetcode.com/problems/partition-equal-subset-sum/
Status: done
Solution: dp-bottom up
Code:
#Time Complexity: O(n*m), where m = sum(nums) #Space Complexity: O(n) class Solution: def canPartition(self, nums: List[int]) -&amp;gt; bool: if sum(nums) % 2 != 0: return False target = sum(nums) // 2 dp = set() dp.add(0) for i in range(len(nums)-1, -1, -1): nextDp = set() for t in dp: if t + nums[i] == target: return True nextDp.add(t+nums[i]) nextDp.add(t) dp = nextDp return False</description></item><item><title>494. Target Sum</title><link>https://zalman0813.github.io/posts/target-sum/</link><pubDate>Sun, 12 Mar 2023 21:45:23 +0800</pubDate><guid>https://zalman0813.github.io/posts/target-sum/</guid><description>Link: https://leetcode.com/problems/target-sum/description/
Status: done
Solution: dp-bottom up
Code:
#Time Complexity: O(n*m), where m = sum(nums) #Space Complexity: O(n) class Solution: def findTargetSumWays(self, nums: List[int], target: int) -&amp;gt; int: tot = sum(nums) if tot &amp;lt; abs(target): return 0 dp = [ [0 for j in range(2*tot + 1)] for i in range(len(nums))] dp[0][tot + nums[0]] = 1 dp[0][tot - nums[0]] += 1 for i in range(1, len(dp)): for t in range(-tot, tot+1): if dp[i-1][tot + t] &amp;gt; 0: dp[i][tot + t - nums[i]] += dp[i-1][tot + t] dp[i][tot + t + nums[i]] += dp[i-1][tot + t] return dp[len(nums) - 1][target + tot]</description></item><item><title>70. Climing Stairs</title><link>https://zalman0813.github.io/posts/climing-stairs/</link><pubDate>Mon, 21 Nov 2022 22:14:36 +0800</pubDate><guid>https://zalman0813.github.io/posts/climing-stairs/</guid><description>Solution: dp - top down
Code:
# Time Complexity: O(n) # Space Complexity: O(1) class Solution: def climbStairs(self, n: int) -&amp;gt; int: # DP: top-down # due to one step and two steps, # (n-2)th result depends on the result of n - 1, n # case n = 3, it&amp;#39;s two way here, # two step: 1 -&amp;gt; -&amp;gt; 3 # one step: 1 -&amp;gt; 2 # initiate one step, two step as 1.</description></item></channel></rss>