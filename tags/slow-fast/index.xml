<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>slow fast on Pin Code Blog</title><link>https://zalman0813.github.io/tags/slow-fast/</link><description>Recent content in slow fast on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Jan 2023 17:27:02 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/slow-fast/index.xml" rel="self" type="application/rss+xml"/><item><title>457. Circular Array Loop</title><link>https://zalman0813.github.io/posts/circular-array-loop/</link><pubDate>Sun, 08 Jan 2023 17:27:02 +0800</pubDate><guid>https://zalman0813.github.io/posts/circular-array-loop/</guid><description>Link: https://leetcode.com/problems/rotate-list
Solution: slow-fast Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(n) class Solution: def circularArrayLoop(self, arr: List[int]) -&amp;gt; bool: #remember all the numbers that have been visited visited = set() for i in range(len(arr)): if i in visited: continue is_forward = arr[i] &amp;gt;= 0 # if we are moving forward or not slow, fast = i, i # if slow or fast becomes &amp;#39;-1&amp;#39; this means we can&amp;#39;t find cycle for this number while True: # move one step for slow pointer slow = self.</description></item></channel></rss>