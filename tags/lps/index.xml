<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lps on Pin Code Blog</title><link>https://zalman0813.github.io/tags/lps/</link><description>Recent content in lps on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Apr 2023 18:02:21 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/lps/index.xml" rel="self" type="application/rss+xml"/><item><title>131. Palindrome Partitioning</title><link>https://zalman0813.github.io/posts/palindrome-partitioning/</link><pubDate>Sun, 09 Apr 2023 18:02:21 +0800</pubDate><guid>https://zalman0813.github.io/posts/palindrome-partitioning/</guid><description>Link: https://leetcode.com/problems/palindromic-substrings/
Code:
# Time Complexity: O(2^n) # Space Complexity: O(2^n) class Solution: def partition(self, s: str) -&amp;gt; List[List[str]]: dp = [[] for _ in range(len(s) + 1)] dp[-1] = [[]] for i in range(len(s) - 1, -1, -1): for j in range(i + 1, len(s) + 1): if s[i:j] == s[i:j][::-1]: for item in dp[j]: dp[i].append([s[i:j]] + item) return dp[0]</description></item><item><title>647. Palindromic Substrings</title><link>https://zalman0813.github.io/posts/palindromic-substrings/</link><pubDate>Sun, 09 Apr 2023 16:57:04 +0800</pubDate><guid>https://zalman0813.github.io/posts/palindromic-substrings/</guid><description>Link: https://leetcode.com/problems/palindromic-substrings/
Code:
# Time Complexity: O(n^2) # Space Complexity: O(n^2) class Solution: def countSubstrings(self, str1: str) -&amp;gt; int: n = len(str1) lookup_table = [[False for _ in range(n)] for _ in range(n)] ps_count=0 for i in range(n - 1, -1, -1): for j in range(i, n): if str1[i] == str1[j]: if i+1 &amp;gt;= j: lookup_table[i][j] = True else: lookup_table[i][j] = lookup_table[i+1][j-1] if lookup_table[i][j]: ps_count += 1 return ps_count</description></item><item><title>516. Longest Palindromic Subsequence</title><link>https://zalman0813.github.io/posts/longest-palindromic-subsequence/</link><pubDate>Sun, 09 Apr 2023 16:52:54 +0800</pubDate><guid>https://zalman0813.github.io/posts/longest-palindromic-subsequence/</guid><description>Link: https://leetcode.com/problems/longest-palindromic-subsequence/description/
Code:
# Time Complexity: O(n^2) # Space Complexity: O(n^2) class Solution: def longestPalindromeSubseq(self, s: str) -&amp;gt; int: dp = [[0 for j in range(len(s))] for i in range(len(s))] for i in range(len(s)): dp[i][i] = 1 for i in range(len(s)-2, -1, -1): for j in range(i+1, len(s)): if j &amp;lt; i: continue if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1] else: dp[i][j] = max( dp[i+1][j], dp[i][j-1] ) return dp[0][len(s)-1]</description></item><item><title>5. Longest Palindromic Substring</title><link>https://zalman0813.github.io/posts/longest-palindromic-substring/</link><pubDate>Sun, 09 Apr 2023 16:41:07 +0800</pubDate><guid>https://zalman0813.github.io/posts/longest-palindromic-substring/</guid><description>Link: https://leetcode.com/problems/longest-palindromic-substring/
Code:
# Time Complexity: O(n^2) # Space Complexity: O(n) class Solution: def longestPalindrome(self, s: str) -&amp;gt; str: res = &amp;#34;&amp;#34; resLen = 0 for i in range(len(s)): # odd length l, r = i, i while l &amp;gt;= 0 and r &amp;lt; len(s) and s[l] == s[r]: if r - l + 1 &amp;gt; resLen: res = s[l:r+1] resLen = r - l + 1 l-=1 r+=1 # even length l, r = i, i+1 while l &amp;gt;= 0 and r &amp;lt; len(s) and s[l] == s[r]: if r - l + 1 &amp;gt; resLen: res = s[l:r+1] resLen = r - l + 1 l-=1 r+=1 return res</description></item></channel></rss>