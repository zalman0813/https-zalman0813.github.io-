<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>top K elements on Pin Code Blog</title><link>https://zalman0813.github.io/tags/top-k-elements/</link><description>Recent content in top K elements on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Feb 2023 09:27:14 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/top-k-elements/index.xml" rel="self" type="application/rss+xml"/><item><title>215. Kth Largest Element in an Array</title><link>https://zalman0813.github.io/posts/kth-largest-element-in-an-array/</link><pubDate>Mon, 13 Feb 2023 09:27:14 +0800</pubDate><guid>https://zalman0813.github.io/posts/kth-largest-element-in-an-array/</guid><description>Link: https://leetcode.com/problems/kth-largest-element-in-an-array/description/
Solution: top k elements Code: top k elements
# Time Complexity: O(nlogk) # Space Complexity: O(k) import heapq class Solution: def findKthLargest(self, nums: List[int], k: int) -&amp;gt; int: # your code will replace this placeholder return statement minHeap = [] for i in range(len(nums)): if len(minHeap) == k: if minHeap[0] &amp;lt; nums[i]: heappop(minHeap) heappush(minHeap, nums[i]) else: heappush(minHeap, nums[i]) return minHeap[0]</description></item><item><title>347. Top K Frequent Elements</title><link>https://zalman0813.github.io/posts/top-k-frequent-elements/</link><pubDate>Sun, 12 Feb 2023 16:56:14 +0800</pubDate><guid>https://zalman0813.github.io/posts/top-k-frequent-elements/</guid><description>Link: https://leetcode.com/problems/top-k-frequent-elements/description/
Solution: top k elements Code: top k elements
# Time Complexity: O(nlogk) # Space Complexity: O(n+k) from collections import Counter import heapq class Solution: def topKFrequent(self, nums: List[int], k: int) -&amp;gt; List[int]: num_freq = Counter(nums) minHeap = [] for num, count in num_freq.items(): if len(minHeap) == k: if count &amp;gt; minHeap[0][0]: heapq.heappop(minHeap) heapq.heappush(minHeap, (count, num)) else: heapq.heappush(minHeap, (count, num)) return [ num for count, num in minHeap ]</description></item><item><title>973. K Closest Points to Origin</title><link>https://zalman0813.github.io/posts/k-closest-points-to-origin/</link><pubDate>Sun, 12 Feb 2023 16:14:53 +0800</pubDate><guid>https://zalman0813.github.io/posts/k-closest-points-to-origin/</guid><description>Link: https://leetcode.com/problems/k-closest-points-to-origin/description/
Solution: top k elements Code: top k elements
# Time Complexity: O(nlogk) # Space Complexity: O(k) import heapq class Solution: def kClosest(self, points: List[List[int]], K: int) -&amp;gt; List[List[int]]: maxHeap = [] for (x, y) in points: if len(maxHeap) == K: head_x = maxHeap[0][1][0] head_y = maxHeap[0][1][1] if self.distance(x, y) &amp;lt; self.distance(head_x, head_y): heapq.heappop(maxHeap) heapq.heappush(maxHeap, [-self.distance(x, y), (x, y)]) else: heapq.heappush(maxHeap, [-self.distance(x, y), (x, y)]) return [[point[0], point[1]] for dist, point in maxHeap] def distance(self, x, y): return (x*x + y*y)</description></item><item><title>767. Reorganize String</title><link>https://zalman0813.github.io/posts/reorganize-string/</link><pubDate>Sun, 12 Feb 2023 15:16:54 +0800</pubDate><guid>https://zalman0813.github.io/posts/reorganize-string/</guid><description>Link: https://leetcode.com/problems/reorganize-string/
Solution: top k elements
Code:
# Time Complexity: O(nlogc). Due to c bounded by the size of the alphabet, space is O(n). # Space Complexity: O(c). Due to c bounded by the size of the alphabet, space is O(1). from collections import Counter import heapq class Solution: def reorganizeString(self, s: str) -&amp;gt; str: char_counter = Counter(s) most_freq_chars = [] for char, freq in char_counter.items(): heapq.heappush(most_freq_chars, [-freq, char]) result = &amp;#34;&amp;#34; previous = None while len(most_freq_chars) &amp;gt; 0: count, char = heapq.</description></item><item><title>703. Kth Largest Element in a Stream</title><link>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</link><pubDate>Sun, 12 Feb 2023 15:12:46 +0800</pubDate><guid>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</guid><description>Link: https://leetcode.com/problems/kth-largest-element-in-a-stream/description/
Solution: top k elements
Code:
# Time Complexity: # 1. init function - O(nlogn) # 2. add function - O(logk) # Space Complexity: O(n) import heapq class KthLargest: def __init__(self, k: int, nums: List[int]): self.minHeap = nums self.k = k heapq.heapify(self.minHeap) while len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) def add(self, val: int) -&amp;gt; int: heappush(self.minHeap, val) if len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) return self.minHeap[0]</description></item></channel></rss>