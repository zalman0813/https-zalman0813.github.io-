<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>top k elements on Pin Code Blog</title><link>https://zalman0813.github.io/tags/top-k-elements/</link><description>Recent content in top k elements on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 15:16:54 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/top-k-elements/index.xml" rel="self" type="application/rss+xml"/><item><title>767. Reorganize String</title><link>https://zalman0813.github.io/posts/reorganize-string/</link><pubDate>Sun, 12 Feb 2023 15:16:54 +0800</pubDate><guid>https://zalman0813.github.io/posts/reorganize-string/</guid><description>Link: https://leetcode.com/problems/reorganize-string/
Solution: top k elements
Code:
# Time Complexity: O(nlogc). Due to c bounded by the size of the alphabet, space is O(n). # Space Complexity: O(c). Due to c bounded by the size of the alphabet, space is O(1). from collections import Counter import heapq class Solution: def reorganizeString(self, s: str) -&amp;gt; str: char_counter = Counter(s) most_freq_chars = [] for char, freq in char_counter.items(): heapq.heappush(most_freq_chars, [-freq, char]) result = &amp;#34;&amp;#34; previous = None while len(most_freq_chars) &amp;gt; 0: count, char = heapq.</description></item><item><title>703. Kth Largest Element in a Stream</title><link>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</link><pubDate>Sun, 12 Feb 2023 15:12:46 +0800</pubDate><guid>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</guid><description>Link: https://leetcode.com/problems/kth-largest-element-in-a-stream/description/
Solution: top k elements
Code:
# Time Complexity: # 1. init function - O(nlogn) # 2. add function - O(logk) # Space Complexity: O(n) import heapq class KthLargest: def __init__(self, k: int, nums: List[int]): self.minHeap = nums self.k = k heapq.heapify(self.minHeap) while len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) def add(self, val: int) -&amp;gt; int: heappush(self.minHeap, val) if len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) return self.minHeap[0]</description></item></channel></rss>