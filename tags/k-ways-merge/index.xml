<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>k-ways merge on Pin Code Blog</title><link>https://zalman0813.github.io/tags/k-ways-merge/</link><description>Recent content in k-ways merge on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 11:16:44 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/k-ways-merge/index.xml" rel="self" type="application/rss+xml"/><item><title>4. Median of Two Sorted Arrays</title><link>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</link><pubDate>Sun, 12 Feb 2023 11:16:44 +0800</pubDate><guid>https://zalman0813.github.io/posts/median-of-two-sorted-arrays/</guid><description>Link: https://leetcode.com/problems/median-of-two-sorted-arrays/
Solution: k-ways merge
Code:
# Time Complexity: O(log(min(m,n))) # Space Complexity: O(1) class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&amp;gt; float: if len(nums1) &amp;gt; len(nums2): return self.findMedianSortedArrays(nums2, nums1) if len(nums1) == 0: if len(nums2) % 2 == 0: return (nums2[len(nums2)//2 - 1] + nums2[len(nums2)//2])/2 else: return nums2[len(nums2)//2] tot_len = len(nums1) + len(nums2) start, end = 0, len(nums1) while start &amp;lt;= end: cut_1 = (start + end) // 2 cut_2 = (tot_len + 1) // 2 - cut_1 left_1 = float(-inf) if cut_1 == 0 else nums1[cut_1 - 1] right_1 = float(inf) if cut_1 == len(nums1) else nums1[cut_1] left_2 = float(-inf) if cut_2 == 0 else nums2[cut_2 - 1] right_2 = float(inf) if cut_2 == len(nums2) else nums2[cut_2] if left_1 &amp;gt; right_2: end = cut_1 - 1 elif left_2 &amp;gt; right_1: start = cut_1 + 1 else: if tot_len % 2 == 0: return (max(left_1, left_2) + min(right_1, right_2)) / 2 else: return max(left_1, left_2) return -1</description></item></channel></rss>