<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>minheap on Pin Code Blog</title><link>https://zalman0813.github.io/tags/minheap/</link><description>Recent content in minheap on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 15:12:46 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/minheap/index.xml" rel="self" type="application/rss+xml"/><item><title>703. Kth Largest Element in a Stream</title><link>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</link><pubDate>Sun, 12 Feb 2023 15:12:46 +0800</pubDate><guid>https://zalman0813.github.io/posts/kth-largest-element-in-a-stream/</guid><description>Link: https://leetcode.com/problems/kth-largest-element-in-a-stream/description/
Solution: top k elements
Code:
# Time Complexity: # 1. init function - O(nlogn) # 2. add function - O(logk) # Space Complexity: O(n) import heapq class KthLargest: def __init__(self, k: int, nums: List[int]): self.minHeap = nums self.k = k heapq.heapify(self.minHeap) while len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) def add(self, val: int) -&amp;gt; int: heappush(self.minHeap, val) if len(self.minHeap) &amp;gt; self.k: heappop(self.minHeap) return self.minHeap[0]</description></item></channel></rss>