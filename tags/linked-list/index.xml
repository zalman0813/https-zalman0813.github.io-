<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linked list on Pin Code Blog</title><link>https://zalman0813.github.io/tags/linked-list/</link><description>Recent content in linked list on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Feb 2023 23:13:17 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/linked-list/index.xml" rel="self" type="application/rss+xml"/><item><title>23. Merge K Sorted Lists</title><link>https://zalman0813.github.io/posts/merge-k-sorted-lists/</link><pubDate>Sun, 05 Feb 2023 23:13:17 +0800</pubDate><guid>https://zalman0813.github.io/posts/merge-k-sorted-lists/</guid><description>Link: https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/
Solution: K-way merge
Code: K-way merge
# Time Complexity: O(nlogk), where k is the number of lists and n is the max length of a single list # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def merge_2_lists(self, head1, head2): dummy = ListNode(-1) prev = dummy # set prev pointer to dummy node # traverse over the lists until both or one of them becomes null while head1 and head2: if head1.</description></item><item><title>457. Circular Array Loop</title><link>https://zalman0813.github.io/posts/circular-array-loop/</link><pubDate>Sun, 08 Jan 2023 17:27:02 +0800</pubDate><guid>https://zalman0813.github.io/posts/circular-array-loop/</guid><description>Link: https://leetcode.com/problems/rotate-list
Solution: slow-fast Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(n) class Solution: def circularArrayLoop(self, arr: List[int]) -&amp;gt; bool: #remember all the numbers that have been visited visited = set() for i in range(len(arr)): if i in visited: continue is_forward = arr[i] &amp;gt;= 0 # if we are moving forward or not slow, fast = i, i # if slow or fast becomes &amp;#39;-1&amp;#39; this means we can&amp;#39;t find cycle for this number while True: # move one step for slow pointer slow = self.</description></item><item><title>61. Rotate List</title><link>https://zalman0813.github.io/posts/rotate-list/</link><pubDate>Sun, 08 Jan 2023 16:44:33 +0800</pubDate><guid>https://zalman0813.github.io/posts/rotate-list/</guid><description>Link: https://leetcode.com/problems/rotate-list
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def rotateRight(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 0 or not head: return head # find last node and length last_node = head list_length = 1 while last_node.next: last_node = last_node.</description></item><item><title>25. Reverse Nodes in K Group</title><link>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</link><pubDate>Sun, 08 Jan 2023 15:28:49 +0800</pubDate><guid>https://zalman0813.github.io/posts/reverse-nodes-in-k-group/</guid><description>Link: https://leetcode.com/problems/reverse-nodes-in-k-group
Solution: linked-list
Code: in-place reverse
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseKGroup(self, head: Optional[ListNode], k: int) -&amp;gt; Optional[ListNode]: if k &amp;lt;= 1 or head is None: return head prev, cur = None, head while cur: last_node_of_last_part, last_node_of_cur_group = prev, cur #check if rest of nodes is less than k.</description></item><item><title>206. Reverse Linked List</title><link>https://zalman0813.github.io/posts/reverse-linked-list/</link><pubDate>Wed, 23 Nov 2022 23:58:22 +0800</pubDate><guid>https://zalman0813.github.io/posts/reverse-linked-list/</guid><description>Link: https://leetcode.com/problems/reverse-linked-list/
Solution: linked-list
Code: linked-list
# Time Complexity: O(n) # Space Complexity: O(1) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]: prev, cur = None, head while cur: tmp = cur.next cur.next = prev prev = cur cur = tmp return prev</description></item></channel></rss>