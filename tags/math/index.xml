<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>math on Pin Code Blog</title><link>https://zalman0813.github.io/tags/math/</link><description>Recent content in math on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Mar 2023 22:18:47 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/tags/math/index.xml" rel="self" type="application/rss+xml"/><item><title>2427. Number of Common Factors</title><link>https://zalman0813.github.io/posts/number-of-common-factors/</link><pubDate>Sun, 12 Mar 2023 22:18:47 +0800</pubDate><guid>https://zalman0813.github.io/posts/number-of-common-factors/</guid><description>Link: https://leetcode.com/problems/number-of-common-factors/description/
Status: done
Solution: math
Code:
#Time Complexity: O(n), where n is the smaller one in a, b #Space Complexity: O(1) class Solution: def commonFactors(self, a: int, b: int) -&amp;gt; int: if b &amp;gt; a: a, b = b, a count = 0 for i in range(1, b+1): if a % i == 0 and b % i == 0: count += 1 return count</description></item><item><title>6296. Alternating Digit Sum</title><link>https://zalman0813.github.io/posts/alternating-digit-sum/</link><pubDate>Sun, 22 Jan 2023 11:09:36 +0800</pubDate><guid>https://zalman0813.github.io/posts/alternating-digit-sum/</guid><description>Link: https://leetcode.com/contest/weekly-contest-329/problems/alternating-digit-sum/
Code:
# Time Complexity: O(n) # Space Complexity: O(1) class Solution: def alternateDigitSum(self, n: int) -&amp;gt; int: sum = 0 digit_num = 0 sign = 1 while n &amp;gt; 0: digit = n % 10 n //= 10 sum += sign*digit digit_num += 1 sign *= -1 return sum if digit_num % 2 == 1 else -sum</description></item><item><title>67. Add Binary</title><link>https://zalman0813.github.io/posts/add-binary/</link><pubDate>Fri, 25 Nov 2022 17:43:17 +0800</pubDate><guid>https://zalman0813.github.io/posts/add-binary/</guid><description>Link: https://leetcode.com/problems/add-binary/
Code:
# Time Complexity: O(n) or n(m), n - a.length, m - b.length # Space Complexity: O(n+m) class Solution: def addBinary(self, a: str, b: str) -&amp;gt; str: res = &amp;#39;&amp;#39; carry = 0 a = list(a) b = list(b) while a or b or carry: if a: carry += int(a.pop()) if b: carry += int(b.pop()) res += str(carry % 2) carry = carry // 2 return res[::-1]</description></item></channel></rss>