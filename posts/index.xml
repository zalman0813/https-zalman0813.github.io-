<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Pin Code Blog</title><link>https://zalman0813.github.io/posts/</link><description>Recent content in Posts on Pin Code Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Nov 2022 21:07:32 +0800</lastBuildDate><atom:link href="https://zalman0813.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Valid Palindrome</title><link>https://zalman0813.github.io/posts/valid-palindrome/</link><pubDate>Fri, 04 Nov 2022 21:07:32 +0800</pubDate><guid>https://zalman0813.github.io/posts/valid-palindrome/</guid><description>Solution: Two Pointer
Code:
class Solution: def isPalindrome(self, s: str) -&amp;gt; bool: l, r = 0, len(s) - 1 while l &amp;lt; r: while l &amp;lt; r and not self.alphaNum(s[l]): l += 1 while l &amp;lt; r and not self.alphaNum(s[r]): r-=1 if s[l].lower() != s[r].lower(): return False l, r = l+1, r-1 return True def alphaNum(self, c): return (ord(&amp;#39;A&amp;#39;) &amp;lt;= ord(c) &amp;lt;= ord(&amp;#39;Z&amp;#39;) or ord(&amp;#39;a&amp;#39;) &amp;lt;= ord(c) &amp;lt;= ord(&amp;#39;z&amp;#39;) or ord(&amp;#39;0&amp;#39;) &amp;lt;= ord(c) &amp;lt;= ord(&amp;#39;9&amp;#39;) ) Time Complexity: O(n)</description></item><item><title>Best Time to Buy and Sell Stock</title><link>https://zalman0813.github.io/posts/best-time-to-buy-and-sell-stock/</link><pubDate>Thu, 03 Nov 2022 18:48:37 +0800</pubDate><guid>https://zalman0813.github.io/posts/best-time-to-buy-and-sell-stock/</guid><description>Solution: two pointer
Code:
class Solution: def maxProfit(self, prices: List[int]) -&amp;gt; int: maxP = 0 l, r = 0, 1 while r &amp;lt; len(prices): profit = prices[r] - prices[l] if profit &amp;gt; 0: maxP = max(profit, maxP) else: l = r r += 1 return maxP Time Complexity: O(n)
Space Complexity: O(1)</description></item><item><title>Merge Two Sorted Lists</title><link>https://zalman0813.github.io/posts/merge-two-sorted-lists/</link><pubDate>Wed, 02 Nov 2022 22:05:02 +0800</pubDate><guid>https://zalman0813.github.io/posts/merge-two-sorted-lists/</guid><description>Link: https://leetcode.com/problems/merge-two-sorted-lists/
Status: done
Solution: two pointer
Code:
class Solution: def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&amp;gt; Optional[ListNode]: dummy = ListNode() tail = dummy while list1 and list2: if list1.val &amp;gt; list2.val: tail.next = list2 list2 = list2.next else: tail.next = list1 list1 = list1.next tail = tail.next if list1: tail.next = list1 if list2: tail.next = list2 return dummy.next Time Complexity: O(n)
Space Complexity: O(1)</description></item><item><title>20. Valid Parenthess</title><link>https://zalman0813.github.io/posts/valid-parenthess/</link><pubDate>Tue, 01 Nov 2022 21:38:19 +0800</pubDate><guid>https://zalman0813.github.io/posts/valid-parenthess/</guid><description>Link: https://leetcode.com/problems/valid-parentheses/
Tags: 169, easy, stack
Status: Done
Solution: Stack
Code:
class Solution: def isValid(self, s: str) -&amp;gt; bool: stack = [] Map = {&amp;#34;)&amp;#34;: &amp;#34;(&amp;#34;, &amp;#34;]&amp;#34;: &amp;#34;[&amp;#34;, &amp;#34;}&amp;#34;: &amp;#34;{&amp;#34;} for char in s: if char in Map: if stack and stack[-1] == Map[char]: stack.pop() else: return False else: stack.append(char) return True if not stack else False Time Complexity: O(n)
Space Complexity:O(n)</description></item><item><title>1.two Sum</title><link>https://zalman0813.github.io/posts/two-sum/</link><pubDate>Mon, 31 Oct 2022 22:01:45 +0800</pubDate><guid>https://zalman0813.github.io/posts/two-sum/</guid><description>Solution: HashMap, Two Pointer
Note:
hashmap: dictionay to store key as num, value as index. tow pointer: sorted and find original index. Need to consider the same value Code:
hashmap class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: hashMap = {} for i, num in enumerate(nums): rest = target - num if rest in hashMap: return [i, hashMap[rest] ] hashMap[num] = i Time Complexity: O(n) Space Complexity: O(n)</description></item><item><title>First Page</title><link>https://zalman0813.github.io/posts/first-page/</link><pubDate>Thu, 01 Sep 2022 23:45:30 +0800</pubDate><guid>https://zalman0813.github.io/posts/first-page/</guid><description>print(&amp;#34;Hello World&amp;#34;)</description></item><item><title>歷年文章</title><link>https://zalman0813.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zalman0813.github.io/archives/</guid><description>歷年文章</description></item></channel></rss>